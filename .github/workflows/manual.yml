# This is a basic workflow that is manually triggered

name: Create Release

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'the tag to make'
        # Default value if no value is explicitly provided
        default: 'vX.Y.Z'
        # Input has to be provided for the workflow to run
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  build_test_release:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-18.04 , target: i686-unknown-linux-gnu , usecross: true }
          - { os: ubuntu-18.04 , target: x86_64-unknown-linux-gnu , usecross: false }
# cant get it to work on windows yet :/
          - { os: windows-latest, target: x86_64-pc-windows-msvc, usecross: false }
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: envtest1
        run: echo ::set-env name=HELLO::hello_world
      - name: echotest1
        run: echo "hellooooo"
      - name: echotest2
        run: echo "$HELLO"
      - name: echotest3
        run: echo $hello1
        env:
          hello1: "hellooooooo111"
      - name: install_rust
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
          profile: minimal
      - name: install_bats
        uses: mig4/setup-bats@v1.0.1
      - name: checkout_code
        id: clone
        run: git clone --single-branch --branch rewrite-rust-github https://github.com/nikita-skobov/git-monorepo-tools .
      - name: install_git_filter_repo
        run: bash .github/install-git-filter-repo.sh ${{ matrix.job.os }}
      - name: build_executable
        uses: actions-rs/cargo@ae10961054e4aa8b4aa7dffede299aaf087aa33b
        with:
          use-cross: ${{ matrix.job.usecross }}
          command: build
          args: --release --target=${{ matrix.job.target }}
      - name: lstest
        run: ls target
      - name: lstest2
        run: ls target/${{ matrix.job.target }}/release
      - name: echotest
        run: echo ::set-env name=PROGRAM_PATH::$(realpath ./target/${{ matrix.job.target }}/release/mgt)
      - name: program_path_exists
        run: ls "$PROGRAM_PATH"
      - name: unit_test
        uses: actions-rs/cargo@ae10961054e4aa8b4aa7dffede299aaf087aa33b
        with:
          use-cross: ${{ matrix.job.usecross }}
          command: test
          args: --release --target=${{ matrix.job.target }}
      - name: program_path_test
        run: echo "$PROGRAM_PATH"
      - name: program_exe_test
        run: bash -c "$PROGRAM_PATH -h"
      - name: e2e_test_general
        run: bats test/general
      - name: e2e_test_splitout
        run: bats test/splitout
      - name: e2e_test_splitin
        run: bats test/splitin
      - name: e2e_test_splitinas
        run: bats test/splitinas
#       - name: testpls
#         run: ./test/run_tests.sh
#       - name: create release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.event.inputs.name }}
#           release_name: my-release-${{ github.event.inputs.name }}
#           body: |
#             dsadsadsa . sdadsa dsa.
#             this is my bodyt.
#             edasweew
#             re wrewrew rewrew.
#           draft: false
#           prerelease: false
#       - name: make asset
#         run: ls -l && zip --junk-paths my-artifact README.md
#       - name: upload asset
#         id: upload-asset
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with: 
#           upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#           asset_path: ./my-artifact.zip
#           asset_name: my-artifact2.zip
#           asset_content_type: application/zip
