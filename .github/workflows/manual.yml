# This is a basic workflow that is manually triggered

name: Create Release

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'the tag to make'
        # Default value if no value is explicitly provided
        default: 'vX.Y.Z'
        # Input has to be provided for the workflow to run
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  build_test_release:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.job.os }}
    strategy:
      matrix:
        job:
          - { os: ubuntu-18.04 , target: x86_64-unknown-linux-gnu , usecross: false }
          - { os: windows-latest, target: x86_64-pc-windows-msvc, usecross: false }
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: download-git-filter-repo
        run: git clone https://github.com/newren/git-filter-repo
      - name: lstest
        run: bash -c ls -l
      - name: gitpathtest
        run: git --exec-path
      - name: install git-filter-repo
        run: sudo cp git-filter-repo/git-filter-repo /usr/lib/git-core/git-filter-repo
      - name: test git-filter-repo
        run: git filter-repo --version
      - name: delete-filter-repo-repo
        run: rm -rf git-filter-repo/
      - name: rust-toolchain
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
          profile: minimal
      - name: bats
        uses: mig4/setup-bats@v1.0.1
      - name: clonepls
        id: clone
        run: git clone --single-branch --branch rewrite-rust https://github.com/nikita-skobov/git-monorepo-tools .
      - name: ls
        run: echo "$PWD" && ls -l
      - name: cargobuild
        uses: actions-rs/cargo@ae10961054e4aa8b4aa7dffede299aaf087aa33b
        with:
          use-cross: ${{ matrix.job.usecross }}
          command: build
          args: --release --target=${{ matrix.job.target }}
      - name: cargotest
        uses: actions-rs/cargo@ae10961054e4aa8b4aa7dffede299aaf087aa33b
        with:
          use-cross: ${{ matrix.job.usecross }}
          command: test
          args: --target=${{ matrix.job.target }}
#       - name: testpls
#         run: ./test/run_tests.sh
#       - name: create release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.event.inputs.name }}
#           release_name: my-release-${{ github.event.inputs.name }}
#           body: |
#             dsadsadsa . sdadsa dsa.
#             this is my bodyt.
#             edasweew
#             re wrewrew rewrew.
#           draft: false
#           prerelease: false
#       - name: make asset
#         run: ls -l && zip --junk-paths my-artifact README.md
#       - name: upload asset
#         id: upload-asset
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with: 
#           upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#           asset_path: ./my-artifact.zip
#           asset_name: my-artifact2.zip
#           asset_content_type: application/zip
